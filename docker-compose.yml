name: media-stack
services:

  authentik-redis:
    profiles: ["no-vpn"]
    image: redis:7-alpine
    command: redis-server --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - authentik-redis:/data
    networks:
      - mynetwork

  authentik-postgresql:
    profiles: ["no-vpn"]
    image: postgres:15-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d authentik -U authentik"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: authentik
      POSTGRES_USER: authentik
      POSTGRES_PASSWORD: authentik-pass
    volumes:
      - authentik-postgresql:/var/lib/postgresql/data
    networks:
      - mynetwork

  authentik:
    profiles: ["no-vpn"]
    image: ghcr.io/goauthentik/server:2023.10.7
    restart: unless-stopped
    command: ["server", "--bind", "0.0.0.0:9000"]
    ports:
      - "9000:9000"
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_REDIS__DB: 1
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: authentik-pass
      AUTHENTIK_DATABASE: postgres://authentik:authentik-pass@authentik-postgresql:5432/authentik
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:-"$(openssl rand -base64 32)"}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_LOG_LEVEL: debug
      AUTHENTIK_DISABLE_STARTUP_ANALYTICS: "true"
      AUTHENTIK_DEFAULT_URL: https://authentik.romptele.com
      AUTHENTIK_PROXY__TRUSTED_PROXIES__0: "0.0.0.0/0"
      AUTHENTIK_PROXY__TRUSTED_PROXIES__1: "::/0"
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL__HOST:-"smtp.gmail.com"}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL__PORT:-"587"}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL__USERNAME:-""}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL__PASSWORD:-""}
      AUTHENTIK_EMAIL__USE_TLS: "true"
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL__FROM:-"authentik@romptele.com"}
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD:-"$(openssl rand -base64 32)"}
      AUTHENTIK_TEMPLATES__DIR: /custom-templates
    user: "1000:1000"
    volumes:
      - authentik-media:/media
      - authentik-custom-templates:/templates
      - authentik-geoip:/geoip
      - authentik-certs:/certs
      - ./authentik/custom-templates:/custom-templates
    networks:
      - mynetwork
    depends_on:
      authentik-postgresql:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy

  authentik-worker:
    profiles: ["no-vpn"]
    image: ghcr.io/goauthentik/server:2023.10.7
    restart: unless-stopped
    command: ["worker"]
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_REDIS__DB: 1
      AUTHENTIK_POSTGRESQL__HOST: authentik-postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: authentik-pass
      AUTHENTIK_DATABASE: postgres://authentik:authentik-pass@authentik-postgresql:5432/authentik
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:-"$(openssl rand -base64 32)"}
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      AUTHENTIK_LOG_LEVEL: debug
      AUTHENTIK_DISABLE_STARTUP_ANALYTICS: "true"
      AUTHENTIK_DEFAULT_URL: https://authentik.romptele.com
      AUTHENTIK_PROXY__TRUSTED_PROXIES__0: "0.0.0.0/0"
      AUTHENTIK_PROXY__TRUSTED_PROXIES__1: "::/0"
      AUTHENTIK_EMAIL__HOST: ${AUTHENTIK_EMAIL__HOST:-"smtp.gmail.com"}
      AUTHENTIK_EMAIL__PORT: ${AUTHENTIK_EMAIL__PORT:-"587"}
      AUTHENTIK_EMAIL__USERNAME: ${AUTHENTIK_EMAIL__USERNAME:-""}
      AUTHENTIK_EMAIL__PASSWORD: ${AUTHENTIK_EMAIL__PASSWORD:-""}
      AUTHENTIK_EMAIL__USE_TLS: "true"
      AUTHENTIK_EMAIL__FROM: ${AUTHENTIK_EMAIL__FROM:-"authentik@romptele.com"}
      AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD:-"$(openssl rand -base64 32)"}
    user: "1000:1000"
    volumes:
      - authentik-media:/media
      - authentik-custom-templates:/templates
      - authentik-geoip:/geoip
      - authentik-certs:/certs
    networks:
      - mynetwork
    depends_on:
      authentik-postgresql:
        condition: service_healthy
      authentik-redis:
        condition: service_healthy

  ldap:
    profiles: ["no-vpn"]
    image: osixia/openldap:1.5.0
    container_name: ldap
    hostname: ldap.romptele.com
    command: --copy-service --loglevel debug
    environment:
      LDAP_ORGANISATION: "romptele"
      LDAP_DOMAIN: "romptele.com"
      LDAP_BASE_DN: "dc=romptele,dc=com"
      LDAP_ADMIN_PASSWORD: "adminpassword123"
      LDAP_CONFIG_PASSWORD: "configpassword123"
      LDAP_READONLY_USER: "false"
      LDAP_TLS: "false"
      LDAP_TLS_VERIFY_CLIENT: "never"
    volumes:
      - ./ldap/data:/var/lib/ldap
      - ./ldap/config:/etc/ldap/slapd.d
    ports:
      - "389:389"
      - "636:636"
    networks:
      - mynetwork
    restart: unless-stopped

  # To use/enable VPN, Run this compose file with --profile=vpn. Its highly recommended to use VPN.
  vpn:
    ## Read https://github.com/qdm12/gluetun-wiki/tree/main/setup/providers for details on configuring VPN for your service provider.
    profiles: ["vpn"]
    container_name: vpn
    image: qmcgaw/gluetun:v3.40.0
    cap_add:
      - NET_ADMIN
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER:-nordvpn} # Valid values: nordvpn, expressvpn, protonvpn, surfshark or custom
      - OPENVPN_USER=${OPENVPN_USER:-""}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD:-""}

      ## For list of server countries, visit https://raw.githubusercontent.com/qdm12/gluetun/master/internal/storage/servers.json
      ## When VPN_SERVICE_PROVIDER is custom. Comment the below line
      - SERVER_COUNTRIES=${SERVER_COUNTRIES:-Switzerland}
    
      # - FREE_ONLY=on  # Valid with protonvpn only. Value willbe set "on" if using free subscription provided by protonvpn

      ## Enable below if VPN_SERVICE_PROVIDER=custom
      # - VPN_TYPE=openvpn # or wireguard. 

      ## If VPN_TYPE is openvpn
      # - OPENVPN_CUSTOM_CONFIG=/gluetun/custom.conf

      ## If VPN_TYPE is wireguard. Replace below env variables as required.
      # - VPN_ENDPOINT_IP=1.2.3.4                                               # Replace with your wg endpoint ip or domain
      # - VPN_ENDPOINT_PORT=51820                                               # Replace with wg server port
      # - WIREGUARD_PUBLIC_KEY=wAUaJMhAq3NFutLHIdF8AN0B5WG8RndfQKLPTEDHal0=     # Replace with your wg public key
      # - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=    # Replace with your wg client private key
      # - WIREGUARD_PRESHARED_KEY=xOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=  # Replaced with your wg pre-shared key
      # - WIREGUARD_ADDRESSES="10.64.222.21/32"                                 # Replace with wg address

    ## Enable volume if VPN_SERVICE_PROVIDER=custom and VPN_TYPE=openvpn is used
    # volumes:
      # - /yourpath/yourconfig.conf:/gluetun/config.conf:ro

    networks:
      - mynetwork

    devices:
      - /dev/net/tun:/dev/net/tun
      
    # Uncomment/enable below ports if VPN is used/enabled
    # ports:
    #   # qbittorrent ports
    #   - 5080:5080
    #   - 6881:6881
    #   - 6881:6881/udp
    #   # prowlarr ports
    #   - 9696:9696
    restart: "unless-stopped"

  ## Default credentials of qBittorrent - Username: admin password: adminadmin ##
  ## Change password after install from UI --> Tools --> Options --> WebUI ##
  qbittorrent:
    profiles: ["vpn", "no-vpn"]
    container_name: qbittorrent
    image: lscr.io/linuxserver/qbittorrent:5.0.4

    # Unomment below if vpn is enabled
    # To connect to qbittorrent outside the VPN network you need to set up a static container IP
    # depends_on:
    #   - wireguard
    # network_mode: service:wireguard  # Comment this line if VPN is disabled
    networks:
      - mynetwork  # Comment this line if VPN is enabled
    ports:
      - 5080:5080
      - 6881:6881
      - 6881:6881/udp
    environment:
      - PUID=0
      - PGID=1307
      - TZ=UTC
      - WEBUI_PORT=5080
    volumes:
      - qbittorrent-config:/config
      - /mnt/media-storage/downloads:/downloads
      - /mnt/media-storage:/media
    restart: "unless-stopped"

  radarr:
    profiles: ["vpn", "no-vpn"]
    container_name: radarr
    image: lscr.io/linuxserver/radarr:5.21.1
    networks:
      - mynetwork   # Comment this line if VPN is enabled
    ## Uncomment below lines if VPN is enabled
    #   mynetwork:
    #     ipv4_address: ${RADARR_STATIC_CONTAINER_IP} # It should be available IPv4 address in range of docker network `mynetwork` e.g. 172.20.0.2
    environment:
      - PUID=0
      - PGID=1307
      - TZ=UTC
    volumes:
      - radarr-config:/config
      - /mnt/media-storage/downloads:/downloads
      - /mnt/media-storage:/media
    ports:
      - 7878:7878
    restart: "unless-stopped"

  sonarr:
    profiles: ["vpn", "no-vpn"]
    image: linuxserver/sonarr:4.0.14
    container_name: sonarr
    networks:
      - mynetwork   # Comment this line if VPN is enabled
    ## Uncomment below lines if VPN is enabled
    #   mynetwork:
    #     ipv4_address: ${SONARR_STATIC_CONTAINER_IP} # It should be available IPv4 address in range of docker network `mynetwork` e.g. 172.20.0.2
    environment:
      - PUID=0
      - PGID=1307
      - TZ=UTC
    volumes:
      - sonarr-config:/config
      - /mnt/media-storage/downloads:/downloads
      - /mnt/media-storage:/media
    ports:
      - 8989:8989
    restart: unless-stopped

  prowlarr:
    profiles: ["vpn", "no-vpn"]
    container_name: prowlarr
    image: linuxserver/prowlarr:1.32.2

    # Uncomment below if vpn is enabled
    # depends_on:               # Uncomment this line if vpn is enabled
      # vpn:                   # Uncomment this line if vpn is enabled
      #   condition: service_healthy # Uncomment this line if vpn is enabled
    # network_mode: service:vpn # Uncomment this line if vpn is enabled

    networks:               # Comment this line if vpn is enabled
      - mynetwork           # Comment this line if vpn is enabled
    environment:
      - PUID=0
      - PGID=1000
      - TZ=UTC
    volumes:
      - prowlarr-config:/config

    # Comment below ports if VPN is enabled.
    ports:
      - 9696:9696
    restart: unless-stopped

  recommendarr:
    profiles: ["recommendarr"]
    container_name: recommendarr
    image: tannermiddleton/recommendarr:v1.3.0
    networks:
      - mynetwork
    environment:
      - NODE_ENV=production
      - DOCKER_ENV=true
      - PORT=3000
      - PUBLIC_URL=https://localhost:3000 # Change this public URL if you are accessing recommendarr on a domain
    volumes:
      - recommendarr-data:/app/server/data
    ports:
      - 3000:3000
    restart: unless-stopped

  jellyseerr:
    profiles: ["vpn", "no-vpn"]
    image: fallenbagel/jellyseerr:2.5.2
    container_name: jellyseerr
    hostname: jellyseerr
    networks:
      - mynetwork
    environment:
      - PUID=1000
      - PGID=1307
      - TZ=UTC
      - NODE_ENV=production
      - APP_URL=https://romptele.com/jellyseerr
      - TMDB_LANGUAGE=en
      - TMDB_REGION=US
      - TMDB_APIKEY=${TMDB_APIKEY}
    volumes:
      - jellyseerr-config:/app/config
      - /mnt/media-storage:/media
    ports:
      - 5055:5055
    restart: unless-stopped

  jellyfin:
    profiles: ["vpn", "no-vpn"]
    image: linuxserver/jellyfin:10.10.6
    container_name: jellyfin
    networks:
      - mynetwork
    environment:
      - PUID=0
      - PGID=1307
      - TZ=UTC
      - JELLYFIN_PublishedServerUrl=https://jellyfin.romptele.com
      - JELLYFIN_CACHE_DIR=/config/cache
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
    volumes:
      - jellyfin-config:/config
      - /mnt/media-storage/downloads:/data
      - /mnt/media-storage:/media
      - /mnt/media-storage/transcodes:/transcode
      - /root/media-stack/jellyfin-custom:/custom
    ports:
      - 8096:8096
      - 7359:7359/udp
      - 8920:8920
    restart: unless-stopped
  
  
  # Doc: https://github.com/navilg/cleanmyarr
  # cleanmyarr:
  #   profiles: ["vpn", "no-vpn"]
  #   depends_on:
  #     - radarr
  #     - sonarr
  #   image: linuxshots/cleanmyarr:0.8.1
  #   container_name: cleanmyarr
  #   networks:
  #     - mynetwork
  #   volumes:
  #     - cleanmyarr-config:/config
    # restart: unless-stopped
    # environment:
    # - CMA_MAINTENANCE_CYCLE=${CMA_MAINTENANCE_CYCLE:-""}
    # - CMA_DELETE_AFTER_DAYS=${CMA_DELETE_AFTER_DAYS:-""}
    # - CMA_ENABLE_EMAIL_NOTIFICATION=${CMA_ENABLE_EMAIL_NOTIFICATION:-""}
    # - CMA_SMTP_USERNAME=${CMA_SMTP_USERNAME:-""}
    # - CMA_SMTP_ENCODED_PASSWORD=${CMA_SMTP_ENCODED_PASSWORD:-""}
    # - CMA_SMTP_TO_EMAILS=${CMA_SMTP_TO_EMAILS:-""}
    # - CMA_ENABLE_GOTIFY_NOTIFICATION=${CMA_ENABLE_GOTIFY_NOTIFICATION:-""}
    # - CMA_GOTIFY_URL=${CMA_GOTIFY_URL:-""}
    # - CMA_GOTIFY_ENCODED_APP_TOKEN=${CMA_GOTIFY_ENCODED_APP_TOKEN:-""}
    # - CMA_ENABLE_TELEGRAM_NOTIFICATION=${CMA_ENABLE_TELEGRAM_NOTIFICATION:-""}
    # - CMA_TELEGRAM_ENCODED_BOT_TOKEN=${CMA_TELEGRAM_ENCODED_BOT_TOKEN:-""}
    # - CMA_TELEGRAM_CHAT_ID=${CMA_TELEGRAM_CHAT_ID:-""}
    # - CMA_MONITOR_RADARR=${CMA_MONITOR_RADARR:-""}
    # - CMA_RADARR_URL=${CMA_RADARR_URL:-""}
    # - CMA_RADARR_ENCODED_API_KEY=${CMA_RADARR_ENCODED_API_KEY:-""}
    # - CMA_RADARR_ENABLE_NOTIFICATION=${CMA_RADARR_ENABLE_NOTIFICATION:-""}

volumes:
  # torrent-downloads:  # This volume is no longer needed
  radarr-config:
  sonarr-config:
  prowlarr-config:
  jellyfin-config:
  qbittorrent-config:
  jellyseerr-config:
  recommendarr-data:
  authentik-redis:
  authentik-postgresql:
  authentik-media:
  authentik-custom-templates:
  authentik-geoip:
  authentik-certs:
  # cleanmyarr-config:

networks:
  mynetwork:
    external: true
